From 8bb5264871348ef18f90345b849803ccd68afe20 Mon Sep 17 00:00:00 2001
From: Matthias Schoepfer <m.schoepfer@rethinkrobotics.com>
Date: Fri, 30 Sep 2022 16:17:55 +0200
Subject: [PATCH] CMakeLists.txt: fixing detection of system zstd

The find_package() did not work because it would not find the
Findzstd.cmake in the cmake/Modules directory. Then, because
zstd_VERSION is not set by the Findzstd script, the system zstd is
still not respected.

Using pkg_search_modules fixes this and renders Findzstd.cmake useless.

Signed-off-by: Matthias Schoepfer <m.schoepfer@rethinkrobotics.com>
---
 CMakeLists.txt               |  5 ++---
 cmake/Modules/Findzstd.cmake | 41 ------------------------------------
 2 files changed, 2 insertions(+), 44 deletions(-)
 delete mode 100644 cmake/Modules/Findzstd.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e3d4a22a..31353481 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,7 +9,8 @@ option(FORCE_BUILD_VENDOR_PKG
   OFF)
 
 if(NOT FORCE_BUILD_VENDOR_PKG)
-  find_package(zstd QUIET)
+  include(FindPkgConfig)
+  pkg_search_module(zstd libzstd)
 endif()
 
 macro(build_zstd)
@@ -65,6 +66,4 @@ else()
   message(STATUS "Found Zstd, skipping build.")
 endif()
 
-install(DIRECTORY cmake DESTINATION share/${PROJECT_NAME})
-
 ament_package(CONFIG_EXTRAS zstd_vendor-extras.cmake)
diff --git a/cmake/Modules/Findzstd.cmake b/cmake/Modules/Findzstd.cmake
deleted file mode 100644
index 5bc2a80d..00000000
--- a/cmake/Modules/Findzstd.cmake
+++ /dev/null
@@ -1,41 +0,0 @@
-# Get package location hint from environment variable (if any)
-if(NOT zstd_ROOT_DIR AND DEFINED ENV{zstd_ROOT_DIR})
-    set(zstd_ROOT_DIR "$ENV{zstd_ROOT_DIR}" CACHE PATH
-            "zstd base directory location (optional, used for nonstandard installation paths)")
-endif()
-
-# Search path for nonstandard package locations
-if(zstd_ROOT_DIR)
-    set(zstd_INCLUDE_PATH PATHS "${zstd_ROOT_DIR}/include" NO_DEFAULT_PATH)
-    set(zstd_LIBRARY_PATH PATHS "${zstd_ROOT_DIR}/lib"     NO_DEFAULT_PATH)
-else()
-    set(zstd_INCLUDE_PATH "")
-    set(zstd_LIBRARY_PATH "")
-endif()
-
-# Find headers and libraries
-find_path(zstd_INCLUDE_DIR NAMES zstd.h PATH_SUFFIXES "zstd" ${zstd_INCLUDE_PATH})
-find_library(zstd_LIBRARY  NAMES zstd   PATH_SUFFIXES "zstd" ${zstd_LIBRARY_PATH})
-
-mark_as_advanced(zstd_INCLUDE_DIR zstd_LIBRARY)
-
-# Output variables generation
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(zstd DEFAULT_MSG zstd_LIBRARY zstd_INCLUDE_DIR)
-
-set(zstd_FOUND ${ZSTD_FOUND}) # Enforce case-correctness: Set appropriately cased variable...
-unset(ZSTD_FOUND) # ...and unset uppercase variable generated by find_package_handle_standard_args
-
-if(zstd_FOUND)
-    set(zstd_INCLUDE_DIRS ${zstd_INCLUDE_DIR})
-    set(zstd_LIBRARIES ${zstd_LIBRARY})
-
-    if(NOT TARGET zstd::zstd)
-        add_library(zstd::zstd UNKNOWN IMPORTED)
-        set_property(TARGET zstd::zstd PROPERTY IMPORTED_LOCATION ${zstd_LIBRARY})
-        set_property(TARGET zstd::zstd PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${zstd_INCLUDE_DIR})
-    endif()
-    list(APPEND zstd_TARGETS zstd::zstd)
-elseif(zstd_FIND_REQUIRED)
-    message(FATAL_ERROR "Unable to find zstd")
-endif()
-- 
2.34.1

