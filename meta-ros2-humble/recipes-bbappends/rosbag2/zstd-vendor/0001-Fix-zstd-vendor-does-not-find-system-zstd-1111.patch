From e7e7269e4b47db726f3257a8e43b02594c8923e9 Mon Sep 17 00:00:00 2001
From: DasRoteSkelett <matthias.schoepfer@googlemail.com>
Date: Thu, 6 Oct 2022 02:46:42 +0200
Subject: [PATCH] Fix/zstd vendor does not find system zstd (#1111)

cmake did not find the Findzstd.cmake in cmake/Modules

Since we cannot use pkg-config for some Windows issues, the parsing of
the version is done by looking for the string in zstd.h.

Signed-off-by: Matthias Schoepfer <m.schoepfer@rethinkrobotics.com>
---
 CMakeLists.txt               |  7 +++++--
 cmake/Modules/Findzstd.cmake | 15 ++++++++++++++-
 2 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e3d4a22..da202fb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,12 +4,15 @@ project(zstd_vendor)
 
 find_package(ament_cmake REQUIRED)
 
+list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules")
+
 option(FORCE_BUILD_VENDOR_PKG
   "Build zstd from source, even if system-installed package is available"
   OFF)
 
 if(NOT FORCE_BUILD_VENDOR_PKG)
-  find_package(zstd QUIET)
+  # We need at least VERSION 1.4.4, version check is done in Findzstd.cmake
+  find_package(zstd 1.4.4 QUIET)
 endif()
 
 macro(build_zstd)
@@ -59,7 +62,7 @@ macro(build_zstd)
     USE_SOURCE_PERMISSIONS)
 endmacro()
 
-if (NOT zstd_FOUND OR "${zstd_VERSION}" VERSION_LESS 1.4.4)
+if (NOT zstd_FOUND)
   build_zstd()
 else()
   message(STATUS "Found Zstd, skipping build.")
diff --git a/cmake/Modules/Findzstd.cmake b/cmake/Modules/Findzstd.cmake
index 5bc2a80..b446476 100644
--- a/cmake/Modules/Findzstd.cmake
+++ b/cmake/Modules/Findzstd.cmake
@@ -17,11 +17,24 @@ endif()
 find_path(zstd_INCLUDE_DIR NAMES zstd.h PATH_SUFFIXES "zstd" ${zstd_INCLUDE_PATH})
 find_library(zstd_LIBRARY  NAMES zstd   PATH_SUFFIXES "zstd" ${zstd_LIBRARY_PATH})
 
+if (zstd_INCLUDE_DIR)
+  file(STRINGS "${zstd_INCLUDE_DIR}/zstd.h" version-file
+    REGEX "#define[ \t]+ZSTD_VERSION_(MAJOR|MINOR|RELEASE).*")
+  list(GET version-file 0 major-line)
+  list(GET version-file 1 minor-line)
+  list(GET version-file 2 release-line)
+  string(REGEX REPLACE "^#define[ \t]+ZSTD_VERSION_MAJOR[ \t]+([0-9]+)$" "\\1" ZSTD_VERSION_MAJOR ${major-line})
+  string(REGEX REPLACE "^#define[ \t]+ZSTD_VERSION_MINOR[ \t]+([0-9]+)$" "\\1" ZSTD_VERSION_MINOR ${minor-line})
+  string(REGEX REPLACE "^#define[ \t]+ZSTD_VERSION_RELEASE[ \t]+([0-9]+)$" "\\1" ZSTD_VERSION_RELEASE ${release-line})
+  set(zstd_VERSION ${ZSTD_VERSION_MAJOR}.${ZSTD_VERSION_MINOR}.${ZSTD_VERSION_RELEASE})
+endif()
+
 mark_as_advanced(zstd_INCLUDE_DIR zstd_LIBRARY)
 
 # Output variables generation
 include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(zstd DEFAULT_MSG zstd_LIBRARY zstd_INCLUDE_DIR)
+find_package_handle_standard_args(zstd REQUIRED_VARS zstd_LIBRARY zstd_INCLUDE_DIR
+  VERSION_VAR zstd_VERSION)
 
 set(zstd_FOUND ${ZSTD_FOUND}) # Enforce case-correctness: Set appropriately cased variable...
 unset(ZSTD_FOUND) # ...and unset uppercase variable generated by find_package_handle_standard_args
-- 
2.35.1

