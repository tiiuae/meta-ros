From 7cbca9d25684cbae2527b29741f7795149fac8f5 Mon Sep 17 00:00:00 2001
From: Matthias Schoepfer <m.schoepfer@rethinkrobotics.com>
Date: Wed, 8 Mar 2023 17:08:47 +0100
Subject: [PATCH] cmake: making package relocatable

It seems that the combination of ament_target_dependencies and
target_link_libraries results in absolute paths in the resulting
cmake files. This renders the results *not* relocatable and
contamins the cross compile results. Also, some cleanup on
fcl and Eigen was attempted.

Signed-off-by: Matthias Schoepfer <m.schoepfer@rethinkrobotics.com>
---
 CMakeLists.txt                            | 16 +----
 collision_detection/CMakeLists.txt        | 36 ++++++-----
 collision_detection_bullet/CMakeLists.txt | 74 ++++++++++++++---------
 collision_detection_fcl/CMakeLists.txt    | 17 ++++--
 collision_distance_field/CMakeLists.txt   | 21 ++++---
 constraint_samplers/CMakeLists.txt        |  2 +
 distance_field/CMakeLists.txt             | 22 ++++---
 dynamics_solver/CMakeLists.txt            | 15 +++--
 exceptions/CMakeLists.txt                 | 11 ++--
 kinematic_constraints/CMakeLists.txt      |  5 +-
 kinematics_base/CMakeLists.txt            |  5 +-
 kinematics_metrics/CMakeLists.txt         |  1 +
 online_signal_smoothing/CMakeLists.txt    |  2 +
 planning_scene/CMakeLists.txt             | 19 +++---
 robot_model/CMakeLists.txt                | 22 +++----
 robot_state/CMakeLists.txt                | 19 +++---
 trajectory_processing/CMakeLists.txt      | 23 +++----
 transforms/CMakeLists.txt                 | 16 ++---
 utils/CMakeLists.txt                      | 22 ++++---
 19 files changed, 191 insertions(+), 157 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9f000181c..9eefaea38 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -7,19 +7,9 @@ moveit_package()
 
 find_package(ament_cmake REQUIRED)
 find_package(rclcpp REQUIRED)
-find_package(eigen3_cmake_module REQUIRED)
 find_package(Eigen3 REQUIRED)
 
-find_package(PkgConfig REQUIRED)
-pkg_check_modules(LIBFCL REQUIRED "fcl>=0.5.0")
-# replace LIBFCL_LIBRARIES with full paths to the libraries
-set(LIBFCL_LIBRARIES_FULL "")
-foreach(LIBFCL_LIBRARY ${LIBFCL_LIBRARIES})
-  find_library(${LIBFCL_LIBRARY}_LIB ${LIBFCL_LIBRARY} ${LIBFCL_LIBRARY_DIRS})
-  list(APPEND LIBFCL_LIBRARIES_FULL ${${LIBFCL_LIBRARY}_LIB})
-endforeach()
-set(LIBFCL_LIBRARIES "${LIBFCL_LIBRARIES_FULL}")
-
+find_package(fcl REQUIRED)
 find_package(Bullet 2.87 REQUIRED)
 find_package(angles REQUIRED)
 find_package(OCTOMAP REQUIRED)
@@ -130,15 +120,11 @@ set(THIS_PACKAGE_INCLUDE_DEPENDS
   trajectory_msgs
   visualization_msgs
   Eigen3
-  eigen3_cmake_module
   OCTOMAP
   Bullet
   ruckig
 )
 
-include_directories(SYSTEM ${EIGEN3_INCLUDE_DIRS}
-  ${LIBFCL_INCLUDE_DIRS}
-)
 
 include_directories(${THIS_PACKAGE_INCLUDE_DIRS}
                     ${VERSION_FILE_PATH})
diff --git a/collision_detection/CMakeLists.txt b/collision_detection/CMakeLists.txt
index 60ae3c713..4febac1f3 100644
--- a/collision_detection/CMakeLists.txt
+++ b/collision_detection/CMakeLists.txt
@@ -13,22 +13,26 @@ add_library(${MOVEIT_LIB_NAME} SHARED
 )
 include(GenerateExportHeader)
 generate_export_header(${MOVEIT_LIB_NAME})
-target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}> $<TARGET_PROPERTY:moveit_planning_scene,INCLUDE_DIRECTORIES>)
-set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION})
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  rclcpp
-  rmw_implementation
-  urdf
-  urdfdom
-  urdfdom_headers
-  visualization_msgs
-  tf2_eigen
-  geometric_shapes
-  OCTOMAP
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/../planning_scene>
+  $<INSTALL_INTERFACE:include>
 )
+set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION})
 
-target_link_libraries(${MOVEIT_LIB_NAME}
+target_link_libraries(${MOVEIT_LIB_NAME} PUBLIC
+  rclcpp::rclcpp
+  rmw_implementation::rmw_implementation
+  urdf::urdf
+  urdfdom::urdf_parser
+  urdfdom_headers::urdfdom_headers
+  ${visualization_msgs_TARGETS}
+  tf2_eigen::tf2_eigen
+  geometric_shapes::geometric_shapes
+  octomap
+  octomath
   moveit_robot_state
+  Eigen3::Eigen
 )
 
 # unit tests
@@ -41,15 +45,15 @@ if(BUILD_TESTING)
 
   ament_add_gtest(test_world test/test_world.cpp
     APPEND_LIBRARY_DIRS "${append_library_dirs}")
-  target_link_libraries(test_world ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_world ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 
   ament_add_gtest(test_world_diff test/test_world_diff.cpp
     APPEND_LIBRARY_DIRS "${append_library_dirs}")
-  target_link_libraries(test_world_diff ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_world_diff ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 
   ament_add_gtest(test_all_valid test/test_all_valid.cpp
     APPEND_LIBRARY_DIRS "${append_library_dirs}")
-  target_link_libraries(test_all_valid ${MOVEIT_LIB_NAME} moveit_robot_model)
+  target_link_libraries(test_all_valid ${MOVEIT_LIB_NAME} moveit_robot_model Eigen3::Eigen)
 endif()
 
 install(DIRECTORY include/ DESTINATION include)
diff --git a/collision_detection_bullet/CMakeLists.txt b/collision_detection_bullet/CMakeLists.txt
index d261a45ba..9d9f1d574 100644
--- a/collision_detection_bullet/CMakeLists.txt
+++ b/collision_detection_bullet/CMakeLists.txt
@@ -11,42 +11,58 @@ add_library(${MOVEIT_LIB_NAME} SHARED
 )
 include(GenerateExportHeader)
 generate_export_header(${MOVEIT_LIB_NAME})
-target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
-set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-ament_target_dependencies(${MOVEIT_LIB_NAME} SYSTEM
-  BULLET
-)
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  rclcpp
-  rmw_implementation
-  urdf
-  urdfdom
-  urdfdom_headers
-  visualization_msgs
-  octomap_msgs
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC
+ $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+ $<BUILD_INTERFACE:${BULLET_INCLUDE_DIR}>
+ $<INSTALL_INTERFACE:include>
 )
-target_link_libraries(${MOVEIT_LIB_NAME}
+
+target_compile_definitions(${MOVEIT_LIB_NAME} PUBLIC BT_USE_DOUBLE_PRECISION)
+
+set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
+
+
+target_link_libraries(${MOVEIT_LIB_NAME} PUBLIC
+  rclcpp::rclcpp
+  rmw_implementation::rmw_implementation
+  urdf::urdf
+  urdfdom::urdf_parser
+  urdfdom_headers::urdfdom_headers
+  ${visualization_msgs_TARGETS}
+  ${octomap_msgs_TARGETS}
   moveit_collision_detection
+  Eigen3::Eigen
+  BulletDynamics
+  BulletInverseDynamics
+  GIMPACTUtils
+  BulletWorldImporter
+  BulletCollision
+  LinearMath
 )
 
 add_library(collision_detector_bullet_plugin SHARED src/collision_detector_bullet_plugin_loader.cpp)
 set_target_properties(collision_detector_bullet_plugin PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-ament_target_dependencies(collision_detector_bullet_plugin SYSTEM
-  BULLET
-)
-ament_target_dependencies(collision_detector_bullet_plugin
-  rclcpp
-  urdf
-  visualization_msgs
-  pluginlib
-  rmw_implementation
-  octomap_msgs
-)
-target_link_libraries(collision_detector_bullet_plugin
+
+target_link_libraries(collision_detector_bullet_plugin PUBLIC
+  rclcpp::rclcpp
+  urdf::urdf
+  ${visualization_msgs_TAGETS}
+  pluginlib::pluginlib
+  rmw_implementation::rmw_implementation
+  ${octomap_msgs_TARGETS}
   ${MOVEIT_LIB_NAME}
   moveit_planning_scene
+  BulletDynamics
+  BulletInverseDynamics
+  GIMPACTUtils
+  BulletWorldImporter
+  BulletCollision
+  LinearMath
+  Eigen3::Eigen
 )
 
+ament_export_dependencies(BULLET)
+
 install(DIRECTORY include/ DESTINATION include)
 install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MOVEIT_LIB_NAME}_export.h DESTINATION include)
 install(TARGETS ${MOVEIT_LIB_NAME} collision_detector_bullet_plugin EXPORT export_${MOVEIT_LIB_NAME}
@@ -64,21 +80,21 @@ if(BUILD_TESTING)
   endif()
 
   ament_add_gtest(test_bullet_collision_detection test/test_bullet_collision_detection_pr2.cpp)
-  target_link_libraries(test_bullet_collision_detection moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_bullet_collision_detection moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen)
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
   if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     target_compile_options(test_bullet_collision_detection PRIVATE -Wno-deprecated-declarations)
   endif()
 
   ament_add_gtest(test_bullet_collision_detection_panda test/test_bullet_collision_detection_panda.cpp)
-  target_link_libraries(test_bullet_collision_detection_panda moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_bullet_collision_detection_panda moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen)
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
   if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     target_compile_options(test_bullet_collision_detection_panda PRIVATE -Wno-deprecated-declarations)
   endif()
 
   ament_add_gtest(test_bullet_continuous_collision_checking test/test_bullet_continuous_collision_checking.cpp)
-  target_link_libraries(test_bullet_continuous_collision_checking moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_bullet_continuous_collision_checking moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen)
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
   if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     target_compile_options(test_bullet_continuous_collision_checking PRIVATE -Wno-deprecated-declarations)
diff --git a/collision_detection_fcl/CMakeLists.txt b/collision_detection_fcl/CMakeLists.txt
index 4dd696f97..f151ea6ff 100644
--- a/collision_detection_fcl/CMakeLists.txt
+++ b/collision_detection_fcl/CMakeLists.txt
@@ -6,7 +6,11 @@ add_library(${MOVEIT_LIB_NAME} SHARED
 )
 include(GenerateExportHeader)
 generate_export_header(${MOVEIT_LIB_NAME})
-target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC
+$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+$<INSTALL_INTERFACE:include>
+)
+
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 ament_target_dependencies(${MOVEIT_LIB_NAME}
   rclcpp
@@ -14,11 +18,12 @@ ament_target_dependencies(${MOVEIT_LIB_NAME}
   urdf
   urdfdom
   urdfdom_headers
-  LIBFCL
   visualization_msgs
 )
 target_link_libraries(${MOVEIT_LIB_NAME}
   moveit_collision_detection
+  Eigen3::Eigen
+  fcl
 )
 
 add_library(collision_detector_fcl_plugin SHARED src/collision_detector_fcl_plugin_loader.cpp)
@@ -33,6 +38,8 @@ ament_target_dependencies(collision_detector_fcl_plugin
 target_link_libraries(collision_detector_fcl_plugin
   ${MOVEIT_LIB_NAME}
   moveit_planning_scene
+  Eigen3::Eigen
+  fcl
 )
 
 install(DIRECTORY include/ DESTINATION include)
@@ -46,17 +53,17 @@ if(BUILD_TESTING)
   endif()
 
   ament_add_gtest(test_fcl_collision_env test/test_fcl_env.cpp)
-  target_link_libraries(test_fcl_collision_env moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_fcl_collision_env moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen fcl)
 
   ament_add_gtest(test_fcl_collision_detection test/test_fcl_collision_detection_pr2.cpp)
-  target_link_libraries(test_fcl_collision_detection moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_fcl_collision_detection moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen fcl)
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
   if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     target_compile_options(test_fcl_collision_detection PRIVATE -Wno-deprecated-declarations)
   endif()
 
   ament_add_gtest(test_fcl_collision_detection_panda test/test_fcl_collision_detection_panda.cpp)
-  target_link_libraries(test_fcl_collision_detection_panda moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_fcl_collision_detection_panda moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen fcl)
   # TODO: remove if transition to gtest's new API TYPED_TEST_SUITE_P is finished
   if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     target_compile_options(test_fcl_collision_detection_panda PRIVATE -Wno-deprecated-declarations)
diff --git a/collision_distance_field/CMakeLists.txt b/collision_distance_field/CMakeLists.txt
index fd0dae019..3b3665e73 100644
--- a/collision_distance_field/CMakeLists.txt
+++ b/collision_distance_field/CMakeLists.txt
@@ -8,18 +8,19 @@ add_library(${MOVEIT_LIB_NAME} SHARED
 )
 include(GenerateExportHeader)
 generate_export_header(${MOVEIT_LIB_NAME})
-target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
-set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  urdf
-  visualization_msgs
-  tf2_eigen
-  geometric_shapes
-  OCTOMAP
+target_include_directories(${MOVEIT_LIB_NAME} PRIVATE
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+    $<INSTALL_INTERFACE:include>
 )
+set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 
-target_link_libraries(${MOVEIT_LIB_NAME}
+target_link_libraries(${MOVEIT_LIB_NAME} PUBLIC
+  urdf::urdf
+  ${visualization_msgs_TARGET}
+  tf2_eigen::tf2_eigen
+  octomap
+  octomath
+  geometric_shapes::geometric_shapes
   moveit_planning_scene
   moveit_distance_field
   moveit_collision_detection
diff --git a/constraint_samplers/CMakeLists.txt b/constraint_samplers/CMakeLists.txt
index e68ee061d..a776c8197 100644
--- a/constraint_samplers/CMakeLists.txt
+++ b/constraint_samplers/CMakeLists.txt
@@ -20,6 +20,7 @@ target_link_libraries(${MOVEIT_LIB_NAME}
   moveit_kinematic_constraints
   moveit_kinematics_base
   moveit_planning_scene
+  Eigen3::Eigen
 )
 
 install(DIRECTORY include/ DESTINATION include)
@@ -50,5 +51,6 @@ if(BUILD_TESTING)
     moveit_test_utils
     moveit_utils
     ${MOVEIT_LIB_NAME}
+    Eigen3::Eigen
   )
 endif()
diff --git a/distance_field/CMakeLists.txt b/distance_field/CMakeLists.txt
index 0f4e5dd71..c1ac9819a 100644
--- a/distance_field/CMakeLists.txt
+++ b/distance_field/CMakeLists.txt
@@ -7,14 +7,16 @@ add_library(${MOVEIT_LIB_NAME} SHARED
 )
 
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  Boost
-  urdfdom
-  urdfdom_headers
-  visualization_msgs
-  geometric_shapes
-  tf2_eigen
-  OCTOMAP
+
+target_link_libraries(${MOVEIT_LIB_NAME} PUBLIC
+  urdfdom::urdf_parser
+  urdfdom_headers::urdfdom_headers
+  ${visualization_msgs_TARGETS}
+  geometric_shapes::geometric_shapes
+  tf2_eigen::tf2_eigen
+  octomap
+  Boost::boost
+  Boost::iostreams
 )
 
 install(DIRECTORY include/ DESTINATION include)
@@ -23,8 +25,8 @@ if(BUILD_TESTING)
   find_package(ament_cmake_gtest REQUIRED)
 
   ament_add_gtest(test_voxel_grid test/test_voxel_grid.cpp)
-  target_link_libraries(test_voxel_grid ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_voxel_grid ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 
   ament_add_gtest(test_distance_field test/test_distance_field.cpp)
-  target_link_libraries(test_distance_field ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_distance_field ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 endif()
diff --git a/dynamics_solver/CMakeLists.txt b/dynamics_solver/CMakeLists.txt
index d8ac1f4eb..1f28a706d 100644
--- a/dynamics_solver/CMakeLists.txt
+++ b/dynamics_solver/CMakeLists.txt
@@ -3,15 +3,14 @@ set(MOVEIT_LIB_NAME moveit_dynamics_solver)
 add_library(${MOVEIT_LIB_NAME} SHARED src/dynamics_solver.cpp)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  urdf
-  urdfdom_headers
-  orocos_kdl
-  visualization_msgs
-  kdl_parser
-)
-target_link_libraries(${MOVEIT_LIB_NAME}
+target_link_libraries(${MOVEIT_LIB_NAME} PUBLIC
   moveit_robot_state
+  urdf::urdf
+  urdfdom_headers::urdfdom_headers
+  orocos-kdl
+  Eigen3::Eigen
+  kdl_parser::kdl_parser
+  ${visualization_msgs_TARGET}
 )
 
 install(DIRECTORY include/ DESTINATION include)
diff --git a/exceptions/CMakeLists.txt b/exceptions/CMakeLists.txt
index 2976afd3f..ac9d367bf 100644
--- a/exceptions/CMakeLists.txt
+++ b/exceptions/CMakeLists.txt
@@ -2,11 +2,12 @@ set(MOVEIT_LIB_NAME moveit_exceptions)
 
 add_library(${MOVEIT_LIB_NAME} SHARED src/exceptions.cpp)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  Boost
-  rclcpp
-  urdfdom
-  urdfdom_headers
+
+target_link_libraries(${MOVEIT_LIB_NAME}
+  Boost::boost
+  rclcpp::rclcpp
+  urdfdom::urdf_parser
+  urdfdom_headers::urdfdom_headers
 )
 
 install(DIRECTORY include/ DESTINATION include)
diff --git a/kinematic_constraints/CMakeLists.txt b/kinematic_constraints/CMakeLists.txt
index 8d4a7201f..c112a2ed8 100644
--- a/kinematic_constraints/CMakeLists.txt
+++ b/kinematic_constraints/CMakeLists.txt
@@ -29,6 +29,7 @@ target_link_libraries(${MOVEIT_LIB_NAME}
   moveit_robot_state
   moveit_robot_model
   moveit_utils
+  Eigen3::Eigen
 )
 
 install(DIRECTORY include/ DESTINATION include)
@@ -39,8 +40,8 @@ if(BUILD_TESTING)
   ament_add_gtest(test_constraints test/test_constraints.cpp
     APPEND_LIBRARY_DIRS "${append_library_dirs}"
   )
-  target_link_libraries(test_constraints moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_constraints moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 
   ament_add_gtest(test_orientation_constraints test/test_orientation_constraints.cpp)
-  target_link_libraries(test_orientation_constraints moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_orientation_constraints moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 endif()
diff --git a/kinematics_base/CMakeLists.txt b/kinematics_base/CMakeLists.txt
index 0776cdeb9..dce8bc5fd 100644
--- a/kinematics_base/CMakeLists.txt
+++ b/kinematics_base/CMakeLists.txt
@@ -4,7 +4,10 @@ set(MOVEIT_LIB_NAME moveit_kinematics_base)
 add_library(${MOVEIT_LIB_NAME} SHARED src/kinematics_base.cpp)
 include(GenerateExportHeader)
 generate_export_header(${MOVEIT_LIB_NAME})
-target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)  # for this library
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC
+$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include>
+)  # for this library
 
 # This line ensures that messages are built before the library is built
 ament_target_dependencies(
diff --git a/kinematics_metrics/CMakeLists.txt b/kinematics_metrics/CMakeLists.txt
index 8f23eef19..f212ff735 100644
--- a/kinematics_metrics/CMakeLists.txt
+++ b/kinematics_metrics/CMakeLists.txt
@@ -11,6 +11,7 @@ ament_target_dependencies(${MOVEIT_LIB_NAME}
 target_link_libraries(${MOVEIT_LIB_NAME}
   moveit_robot_model
   moveit_robot_state
+  Eigen3::Eigen
 )
 
 install(DIRECTORY include/ DESTINATION include)
diff --git a/online_signal_smoothing/CMakeLists.txt b/online_signal_smoothing/CMakeLists.txt
index 851bde9b1..b05db749f 100644
--- a/online_signal_smoothing/CMakeLists.txt
+++ b/online_signal_smoothing/CMakeLists.txt
@@ -7,6 +7,7 @@ include(GenerateExportHeader)
 generate_export_header(${SMOOTHING_BASE_LIB})
 target_include_directories(${SMOOTHING_BASE_LIB} PUBLIC
   $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+  $<INSTALL_INTERFACE:include>
 )
 set_target_properties(${SMOOTHING_BASE_LIB} PROPERTIES VERSION
   "${${PROJECT_NAME}_VERSION}"
@@ -23,6 +24,7 @@ add_library(${BUTTERWORTH_FILTER_LIB} SHARED
 generate_export_header(${BUTTERWORTH_FILTER_LIB})
 target_include_directories(${BUTTERWORTH_FILTER_LIB} PUBLIC
   $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+  $<INSTALL_INTERFACE:include>
 )
 set_target_properties(${BUTTERWORTH_FILTER_LIB} PROPERTIES VERSION
   "${${PROJECT_NAME}_VERSION}"
diff --git a/planning_scene/CMakeLists.txt b/planning_scene/CMakeLists.txt
index 370d0a298..285340e35 100644
--- a/planning_scene/CMakeLists.txt
+++ b/planning_scene/CMakeLists.txt
@@ -3,19 +3,20 @@ set(MOVEIT_LIB_NAME moveit_planning_scene)
 add_library(${MOVEIT_LIB_NAME} SHARED src/planning_scene.cpp)
 include(GenerateExportHeader)
 generate_export_header(${MOVEIT_LIB_NAME})
-target_include_directories(${MOVEIT_LIB_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
+target_include_directories(${MOVEIT_LIB_NAME} PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+  $<INSTALL_INTERFACE:include>
+)
 #TODO: Fix the versioning
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  Boost
-  rclcpp
-  urdfdom
-  urdfdom_headers
-  octomap_msgs
-  OCTOMAP
-)
 
 target_link_libraries(${MOVEIT_LIB_NAME}
+  Boost::boost
+  rclcpp::rclcpp
+  urdfdom::urdf_parser
+  urdfdom_headers::urdfdom_headers
+  ${octomap_msgs_TARGETS}
+  octomap
   moveit_robot_model
   moveit_robot_state
   moveit_exceptions
diff --git a/robot_model/CMakeLists.txt b/robot_model/CMakeLists.txt
index 05da550fd..1e083a139 100644
--- a/robot_model/CMakeLists.txt
+++ b/robot_model/CMakeLists.txt
@@ -14,17 +14,17 @@ add_library(${MOVEIT_LIB_NAME} SHARED
   src/robot_model.cpp
 )
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  angles
-  moveit_msgs
-  Eigen3
-  geometric_shapes
-  urdf
-  urdfdom_headers
-  srdfdom
-  visualization_msgs
-)
+
 target_link_libraries(${MOVEIT_LIB_NAME}
+  angles::angles
+  ${moveit_msgs_TARGETS}
+  Eigen3::Eigen
+  geometric_shapes::geometric_shapes
+  urdf::urdf
+  urdfdom_headers::urdfdom_headers
+  srdfdom::srdfdom
+  ${visualization_msgs_TARGETS}
+  random_numbers
   moveit_exceptions
   moveit_kinematics_base
 )
@@ -35,7 +35,7 @@ if(BUILD_TESTING)
   ament_target_dependencies(test_robot_model
     rclcpp
   )
-  target_link_libraries(test_robot_model moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_robot_model moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 endif()
 
 install(DIRECTORY include/ DESTINATION include)
diff --git a/robot_state/CMakeLists.txt b/robot_state/CMakeLists.txt
index e2c942e3c..b596b5d23 100644
--- a/robot_state/CMakeLists.txt
+++ b/robot_state/CMakeLists.txt
@@ -7,17 +7,17 @@ add_library(${MOVEIT_LIB_NAME} SHARED
   src/cartesian_interpolator.cpp
 )
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION})
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  urdf
-  tf2_geometry_msgs
-  geometric_shapes
-  urdfdom_headers
-  Boost
-)
+
 target_link_libraries(${MOVEIT_LIB_NAME}
+  urdf::urdf
+  ${tf2_geometry_msgs_TARGETS}
+  geometric_shapes::geometric_shapes
+  urdfdom_headers::urdfdom_headers
+  Boost::boost
   moveit_robot_model
   moveit_kinematics_base
   moveit_transforms
+  Eigen3::Eigen
 )
 
 install(DIRECTORY include/ DESTINATION include)
@@ -42,6 +42,7 @@ if(BUILD_TESTING)
     moveit_utils
     moveit_exceptions
     ${MOVEIT_LIB_NAME}
+    Eigen3::Eigen
   )
 
   # As an executable, this benchmark is not run as a test by default
@@ -51,6 +52,7 @@ if(BUILD_TESTING)
     moveit_utils
     moveit_exceptions
     ${MOVEIT_LIB_NAME}
+    Eigen3::Eigen
   )
 
   ament_add_gtest(test_robot_state_complex test/test_kinematic_complex.cpp)
@@ -59,6 +61,7 @@ if(BUILD_TESTING)
     moveit_utils
     moveit_exceptions
     ${MOVEIT_LIB_NAME}
+    Eigen3::Eigen
   )
 
   ament_add_gtest(test_aabb test/test_aabb.cpp)
@@ -67,11 +70,13 @@ if(BUILD_TESTING)
     moveit_utils
     moveit_exceptions
     ${MOVEIT_LIB_NAME}
+    Eigen3::Eigen
   )
 
   ament_add_gtest(test_cartesian_interpolator test/test_cartesian_interpolator.cpp)
   target_link_libraries(test_cartesian_interpolator
     moveit_test_utils
     ${MOVEIT_LIB_NAME}
+    Eigen3::Eigen
   )
 endif()
diff --git a/trajectory_processing/CMakeLists.txt b/trajectory_processing/CMakeLists.txt
index 996110104..2e2966914 100644
--- a/trajectory_processing/CMakeLists.txt
+++ b/trajectory_processing/CMakeLists.txt
@@ -9,19 +9,19 @@ add_library(${MOVEIT_LIB_NAME} SHARED
 )
 
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  rclcpp
-  rmw_implementation
-  urdf
-  urdfdom
-  urdfdom_headers
-  visualization_msgs
-  Boost
-)
+
 target_link_libraries(${MOVEIT_LIB_NAME}
+  rclcpp::rclcpp
+  rmw_implementation::rmw_implementation
+  urdf::urdf
+  urdfdom::urdf_parser
+  urdfdom_headers::urdfdom_headers
+  ${visualization_msgs_TARGETS}
+  Boost::boost
   moveit_robot_state
   moveit_robot_trajectory
   ruckig::ruckig
+  Eigen3::Eigen
 )
 
 install(DIRECTORY include/ DESTINATION include)
@@ -36,14 +36,15 @@ if(BUILD_TESTING)
 
   ament_add_gtest(test_time_parameterization test/test_time_parameterization.cpp
     APPEND_LIBRARY_DIRS "${append_library_dirs}")
-  target_link_libraries(test_time_parameterization moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_time_parameterization moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 
   ament_add_gtest(test_time_optimal_trajectory_generation test/test_time_optimal_trajectory_generation.cpp)
-  target_link_libraries(test_time_optimal_trajectory_generation moveit_test_utils ${MOVEIT_LIB_NAME})
+  target_link_libraries(test_time_optimal_trajectory_generation moveit_test_utils ${MOVEIT_LIB_NAME} Eigen3::Eigen)
 
   ament_add_gtest(test_ruckig_traj_smoothing test/test_ruckig_traj_smoothing.cpp)
   target_link_libraries(test_ruckig_traj_smoothing
     ${MOVEIT_LIB_NAME}
     moveit_test_utils
+    Eigen3::Eigen
   )
 endif()
diff --git a/transforms/CMakeLists.txt b/transforms/CMakeLists.txt
index 028c9fee6..93e1582a2 100644
--- a/transforms/CMakeLists.txt
+++ b/transforms/CMakeLists.txt
@@ -2,14 +2,14 @@ set(MOVEIT_LIB_NAME moveit_transforms)
 
 add_library(${MOVEIT_LIB_NAME} SHARED src/transforms.cpp)
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-ament_target_dependencies(${MOVEIT_LIB_NAME}
-  geometric_shapes
-  tf2_eigen
-  rclcpp
-  rmw_implementation
-  urdfdom
-  urdfdom_headers
-  Boost
+target_link_libraries(${MOVEIT_LIB_NAME}
+  geometric_shapes::geometric_shapes
+  tf2_eigen::tf2_eigen
+  rclcpp::rclcpp
+  rmw_implementation::rmw_implementation
+  urdfdom::urdf_parser
+  urdfdom_headers::urdfdom_headers
+  Boost::boost
 )
 
 install(DIRECTORY include/ DESTINATION include)
diff --git a/utils/CMakeLists.txt b/utils/CMakeLists.txt
index f94540da3..7c5192fc3 100644
--- a/utils/CMakeLists.txt
+++ b/utils/CMakeLists.txt
@@ -5,7 +5,7 @@ add_library(${MOVEIT_LIB_NAME} SHARED
   src/message_checks.cpp
   src/rclcpp_utils.cpp
 )
-ament_target_dependencies(${MOVEIT_LIB_NAME} Boost moveit_msgs)
+target_link_libraries(${MOVEIT_LIB_NAME} Boost::boost ${moveit_msgs_TARGETS})
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 
 install(DIRECTORY include/ DESTINATION include)
@@ -14,14 +14,16 @@ install(DIRECTORY include/ DESTINATION include)
 find_package(ament_index_cpp REQUIRED)
 set(MOVEIT_TEST_LIB_NAME moveit_test_utils)
 add_library(${MOVEIT_TEST_LIB_NAME} SHARED src/robot_model_test_utils.cpp)
-target_link_libraries(${MOVEIT_TEST_LIB_NAME} moveit_robot_model)
-ament_target_dependencies(${MOVEIT_TEST_LIB_NAME}
-  ament_index_cpp
-  Boost
-  geometry_msgs
-  urdf
-  srdfdom
-  urdfdom
-  urdfdom_headers
+target_link_libraries(${MOVEIT_TEST_LIB_NAME}
+  ament_index_cpp::ament_index_cpp
+  Boost::boost
+  ${geometry_msgs_TARGETS}
+  urdf::urdf
+  srdfdom::srdfdom
+  urdfdom::urdf_parser
+  urdfdom_headers::urdfdom_headers
+  moveit_robot_model
 )
+
+
 set_target_properties(${MOVEIT_TEST_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
-- 
2.39.2

